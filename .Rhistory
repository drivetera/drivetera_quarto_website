1+1
quarto check
reticulate::py_config()
exit()
reticulate::repl_python()
reticulate::repl_python()
1+1
quarto check
2+2
library(shiny)
library(ggplot2)
# UI for sliders and plot
ui <- fluidPage(
titlePanel("Milankovitch Cycle Explorer 🌍"),
sidebarLayout(
sidebarPanel(
sliderInput("tilt", "Axial Tilt (°):", min = 22.1, max = 24.5, value = 23.5, step = 0.1),
sliderInput("eccentricity", "Eccentricity:", min = 0, max = 0.06, value = 0.0167, step = 0.001),
sliderInput("precession", "Precession Angle (°):", min = 0, max = 360, value = 0, step = 10)
),
mainPanel(
plotOutput("insolationPlot"),
textOutput("description")
)
)
)
# Server logic
server <- function(input, output) {
output$insolationPlot <- renderPlot({
# Constants
S0 <- 1361 # Solar constant (W/m^2)
lat <- seq(-90, 90, by = 1) # Latitudes
# Insolation calculation
e <- input$eccentricity
tilt <- input$tilt * pi / 180 # Convert to radians
precession <- input$precession * pi / 180 # Convert to radians
insolation <- S0 * (1 + e * cos(precession)) * cos(lat * pi / 180 - tilt)
# Plot
ggplot(data.frame(lat, insolation), aes(x = lat, y = insolation)) +
geom_line(color = "blue") +
labs(
title = "Solar Insolation by Latitude",
x = "Latitude (°)",
y = "Insolation (W/m^2)"
) +
theme_minimal()
})
output$description <- renderText({
paste(
"Axial Tilt: ", round(input$tilt, 2), "°",
"| Eccentricity: ", round(input$eccentricity, 4),
"| Precession Angle: ", round(input$precession, 2), "°"
)
})
}
# Run the app
shinyApp(ui, server)
library(ggplot2)
# Example historical data
years <- seq(-200000, 0, by = 1000)
tilt <- 23.5 + 1.5 * sin(seq(0, 4 * pi, length.out = length(years)))
eccentricity <- 0.0167 + 0.03 * sin(seq(0, 2 * pi, length.out = length(years)))
precession <- seq(0, 360, length.out = length(years))
# Create a data frame
data <- data.frame(years, tilt, eccentricity, precession)
# Plot historical trends
ggplot(data, aes(x = years)) +
geom_line(aes(y = tilt, color = "Axial Tilt")) +
geom_line(aes(y = eccentricity * 100, color = "Eccentricity (x100)")) +
geom_line(aes(y = precession / 10, color = "Precession (°/10)")) +
labs(
title = "Historical Changes in Orbital Parameters",
x = "Years Before Present",
y = "Value",
color = "Orbital Parameter"
) +
theme_minimal()
install.packages("rayshader")
install.packages("rayshader")
# Generate random terrain
set.seed(42)  # For reproducibility
terrain_size <- 100  # 100x100 grid
terrain <- matrix(runif(terrain_size^2, min = 0, max = 300), nrow = terrain_size)
# Smooth the terrain for realism
terrain <- terrain * exp(-0.01 * (row(terrain) - terrain_size / 2)^2)  # Add gradient
terrain <- terrain * exp(-0.01 * (col(terrain) - terrain_size / 2)^2)
# Visualize the raw terrain (optional)
library(ggplot2)
ggplot(data = as.data.frame(as.table(terrain)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal()
# Install and load rayshader
library(rayshader)
library(rayshader)
install.packages("rgl", type = "source")
install.packages("rgl", type = "source")
install.packages("rayshader", type = "source")
install.packages("rayshader", type = "source")
# Generate random terrain
set.seed(42)  # For reproducibility
terrain_size <- 100  # 100x100 grid
terrain <- matrix(runif(terrain_size^2, min = 0, max = 300), nrow = terrain_size)
# Smooth the terrain for realism
terrain <- terrain * exp(-0.01 * (row(terrain) - terrain_size / 2)^2)  # Add gradient
terrain <- terrain * exp(-0.01 * (col(terrain) - terrain_size / 2)^2)
# Visualize the raw terrain (optional)
library(ggplot2)
ggplot(data = as.data.frame(as.table(terrain)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal()
# Install and load rayshader
library(rayshader)
library(rayshader)
